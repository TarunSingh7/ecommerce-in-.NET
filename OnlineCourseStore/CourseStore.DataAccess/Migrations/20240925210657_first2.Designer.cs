// <auto-generated />
using System;
using CourseStore.DataAccess.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CourseStore.DataAccess.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240925210657_first2")]
    partial class first2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CourseStore.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DisplayOrder = 1,
                            Name = "Coding"
                        },
                        new
                        {
                            Id = 2,
                            DisplayOrder = 2,
                            Name = "Soft Skills"
                        },
                        new
                        {
                            Id = 3,
                            DisplayOrder = 3,
                            Name = "Photography"
                        },
                        new
                        {
                            Id = 4,
                            DisplayOrder = 4,
                            Name = "Video Editing"
                        },
                        new
                        {
                            Id = 5,
                            DisplayOrder = 5,
                            Name = "Digital Marketing"
                        },
                        new
                        {
                            Id = 6,
                            DisplayOrder = 6,
                            Name = "Creative Writing"
                        },
                        new
                        {
                            Id = 7,
                            DisplayOrder = 7,
                            Name = "Graphic Design"
                        },
                        new
                        {
                            Id = 8,
                            DisplayOrder = 8,
                            Name = "Finance & Accounting"
                        },
                        new
                        {
                            Id = 9,
                            DisplayOrder = 9,
                            Name = "Business Management"
                        },
                        new
                        {
                            Id = 10,
                            DisplayOrder = 10,
                            Name = "Health & Wellness"
                        });
                });

            modelBuilder.Entity("CourseStore.Models.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Companies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            City = "Silicon Valley",
                            Name = "Tech Solution",
                            PhoneNumber = "1234567890",
                            PostalCode = "94025",
                            State = "California",
                            StreetAddress = "123 Innovation Road"
                        },
                        new
                        {
                            Id = 2,
                            City = "Austin",
                            Name = "Big Tech",
                            PhoneNumber = "9876543210",
                            PostalCode = "73301",
                            State = "Texas",
                            StreetAddress = "456 High Tech Ave"
                        },
                        new
                        {
                            Id = 3,
                            City = "New York",
                            Name = "Data Insights",
                            PhoneNumber = "5555555555",
                            PostalCode = "10001",
                            State = "New York",
                            StreetAddress = "789 Data Drive"
                        },
                        new
                        {
                            Id = 4,
                            City = "Los Angeles",
                            Name = "Creative Minds",
                            PhoneNumber = "4444444444",
                            PostalCode = "90001",
                            State = "California",
                            StreetAddress = "101 Creative Lane"
                        },
                        new
                        {
                            Id = 5,
                            City = "Boston",
                            Name = "Skill Academy",
                            PhoneNumber = "3333333333",
                            PostalCode = "02108",
                            State = "Massachusetts",
                            StreetAddress = "202 Skill Road"
                        });
                });

            modelBuilder.Entity("CourseStore.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Duration")
                        .HasColumnType("float");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Instructor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<double>("Price100")
                        .HasColumnType("float");

                    b.Property<double>("Price50")
                        .HasColumnType("float");

                    b.Property<double>("StandardPrice")
                        .HasColumnType("float");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            Content = "This course covers the fundamentals of Python programming.",
                            Description = "Learn the basics of Python programming, including syntax, variables, loops, and functions. Perfect for beginners.",
                            Duration = 20.0,
                            ImageUrl = "",
                            Instructor = "John Doe",
                            Level = "Beginner",
                            Price = 90.0,
                            Price100 = 80.0,
                            Price50 = 85.0,
                            StandardPrice = 100.0,
                            Title = "Introduction to Python Programming"
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            Content = "This course provides a complete guide to web development.",
                            Description = "A comprehensive course on building modern websites using HTML, CSS, and JavaScript. Includes hands-on projects.",
                            Duration = 30.0,
                            ImageUrl = "",
                            Instructor = "Jane Smith",
                            Level = "Intermediate",
                            Price = 110.0,
                            Price100 = 90.0,
                            Price50 = 100.0,
                            StandardPrice = 120.0,
                            Title = "Web Development with HTML, CSS, and JavaScript"
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 2,
                            Content = "This course focuses on enhancing communication abilities.",
                            Description = "Develop your communication skills to improve personal and professional interactions, including active listening and feedback.",
                            Duration = 10.0,
                            ImageUrl = "",
                            Instructor = "Mark Robinson",
                            Level = "Beginner",
                            Price = 45.0,
                            Price100 = 35.0,
                            Price50 = 40.0,
                            StandardPrice = 50.0,
                            Title = "Effective Communication Skills"
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 2,
                            Content = "This course teaches essential leadership strategies.",
                            Description = "Master leadership skills, team management, and conflict resolution techniques to become an effective leader.",
                            Duration = 15.0,
                            ImageUrl = "",
                            Instructor = "Sarah Johnson",
                            Level = "Advanced",
                            Price = 75.0,
                            Price100 = 65.0,
                            Price50 = 70.0,
                            StandardPrice = 80.0,
                            Title = "Leadership and Team Management"
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 3,
                            Content = "This course introduces fundamental photography concepts.",
                            Description = "Learn the basics of photography, including camera settings, composition, and lighting techniques. Perfect for aspiring photographers.",
                            Duration = 12.0,
                            ImageUrl = "",
                            Instructor = "Julian Button",
                            Level = "Beginner",
                            Price = 50.0,
                            Price100 = 35.0,
                            Price50 = 40.0,
                            StandardPrice = 55.0,
                            Title = "Photography for Beginners"
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 3,
                            Content = "This course covers advanced techniques in portrait photography.",
                            Description = "Enhance your portrait photography skills with advanced lighting setups, posing techniques, and editing tips.",
                            Duration = 20.0,
                            ImageUrl = "",
                            Instructor = "Emily Watson",
                            Level = "Advanced",
                            Price = 95.0,
                            Price100 = 75.0,
                            Price50 = 85.0,
                            StandardPrice = 100.0,
                            Title = "Advanced Portrait Photography"
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 4,
                            Content = "This course covers basic video editing techniques.",
                            Description = "Learn the fundamentals of video editing using Adobe Premiere Pro, including cutting, transitions, and adding effects.",
                            Duration = 15.0,
                            ImageUrl = "",
                            Instructor = "Chris Evans",
                            Level = "Beginner",
                            Price = 65.0,
                            Price100 = 55.0,
                            Price50 = 60.0,
                            StandardPrice = 70.0,
                            Title = "Basic Video Editing with Adobe Premiere Pro"
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 4,
                            Content = "This course teaches advanced video editing methods.",
                            Description = "Master advanced video editing techniques, including color correction, motion graphics, and sound design.",
                            Duration = 25.0,
                            ImageUrl = "",
                            Instructor = "Laura Stone",
                            Level = "Intermediate",
                            Price = 110.0,
                            Price100 = 90.0,
                            Price50 = 100.0,
                            StandardPrice = 120.0,
                            Title = "Creative Video Editing Techniques"
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 5,
                            Content = "This course introduces digital marketing fundamentals.",
                            Description = "Explore the basics of digital marketing, including SEO, social media marketing, and content creation strategies.",
                            Duration = 18.0,
                            ImageUrl = "",
                            Instructor = "Daniel Craig",
                            Level = "Beginner",
                            Price = 85.0,
                            Price100 = 75.0,
                            Price50 = 80.0,
                            StandardPrice = 90.0,
                            Title = "Introduction to Digital Marketing"
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 6,
                            Content = "This course focuses on developing creative writing skills.",
                            Description = "Develop your creative writing skills with this beginner course covering storytelling, character development, and editing.",
                            Duration = 10.0,
                            ImageUrl = "",
                            Instructor = "Olivia Brown",
                            Level = "Beginner",
                            Price = 45.0,
                            Price100 = 35.0,
                            Price50 = 40.0,
                            StandardPrice = 50.0,
                            Title = "Creative Writing for Beginners"
                        });
                });

            modelBuilder.Entity("CourseStore.Models.ShoppingCart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("ProductId");

                    b.ToTable("ShoppingCarts");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("CourseStore.Models.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CompanyId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetAddress")
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("CompanyId");

                    b.HasDiscriminator().HasValue("ApplicationUser");
                });

            modelBuilder.Entity("CourseStore.Models.Product", b =>
                {
                    b.HasOne("CourseStore.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("CourseStore.Models.ShoppingCart", b =>
                {
                    b.HasOne("CourseStore.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CourseStore.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CourseStore.Models.ApplicationUser", b =>
                {
                    b.HasOne("CourseStore.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });
#pragma warning restore 612, 618
        }
    }
}
